%global caps;
%let caps=/folders/myshortcuts/myfolder/Capstone; 
libname capstone "&caps";

data capstone.food_data_cats;
	set capstone.combined_food_data;
	if INDEX(Namevar, 'rice')>0 then cat=1;
	else if INDEX(Namevar, 'pasta')>0 then cat=5;
	else if INDEX(Namevar, 'crackers')>0 then cat=4;
	else if INDEX(Namevar, 'rusk')>0 then cat=4;
	else if INDEX(Namevar, 'toast')>0 then cat=4; 
	else if INDEX(Namevar, 'biscuit')>0 then cat=4; 
	else if	INDEX(Namevar, 'wafer')>0 then cat=4; 
	else if INDEX(Namevar, 'waffle')>0 then cat=4;
	else if INDEX(Namevar, 'muffin')>0 then cat=4; 
	else if INDEX(Namevar, 'croissant')>0 then cat=4; 
	else if INDEX(Namevar, 'cake')>0 then cat=4; 
	else if INDEX(Namevar, 'tart')>0 then cat=4; 
	else if INDEX(Namevar, 'pie')>0 then cat=4;
	else if INDEX(Namevar, 'bread')>0 then cat=3;
	else if INDEX(Namevar, 'english')>0 then cat=3;
	else if INDEX(Namevar, 'bagel')>0 then cat=3;
	else if INDEX(Namevar, 'butterscotch')>0 then cat=26;
	else if INDEX(Namevar, 'goat')>0 then cat=8;
	else if INDEX(Namevar, 'maiz')>0 then cat=2;
	else if INDEX(Namevar, 'wheat')>0 then cat=2; 
	else if INDEX(Namevar, 'barley')>0 then cat=2; 
	else if INDEX(Namevar, 'oat')>0 then cat=2;
	else if INDEX(Namevar, 'grain')>0 then cat=2;
	else if INDEX(Namevar, 'beef')>0 then cat=6;
	else if INDEX(Namevar, 'veal')>0 then cat=6;
	else if INDEX(Namevar, 'pork')>0 then cat=7;
	else if INDEX(Namevar, 'egg_custard')>0 then cat=16;
	else if INDEX(Namevar, 'egg_raw')>0 then cat=16;
	else if INDEX(Namevar, 'egg_poached')>0 then cat=16;
	else if INDEX(Namevar, 'egg_pasteurized')>0 then cat=16;
	else if INDEX(Namevar, 'egg_dried')>0 then cat=16;
	else if INDEX(Namevar, 'egg_fresh')>0 then cat=16;
	else if INDEX(Namevar, 'lamb')>0 then cat=8;
	else if INDEX(Namevar, 'mutton')>0 then cat=8;
	else if INDEX(Namevar, 'chicken')>0 then cat=9;
	else if INDEX(Namevar, 'duck')>0 then cat=9;
	else if INDEX(Namevar, 'goose')>0 then cat=9;
	else if INDEX(Namevar, 'turkey')>0 then cat=9;
	else if INDEX(Namevar, 'guinea')>0 then cat=9;
	else if INDEX(Namevar, 'game')>0  then cat=10;
	else if INDEX(Namevar, 'tea')>0 then cat=28;
	else if INDEX(Namevar, 'seal')>0 then cat=10;
	else if INDEX(Namevar, 'ham')>0 then cat=10;
	else if INDEX(Namevar, 'bacon')>0 then cat=10;
	else if INDEX(Namevar, 'spam')>0 then cat=10;
	else if INDEX(Namevar, 'fish_raw')>0 then cat=11;
	else if INDEX(Namevar, 'fish_dried')>0 then cat=12; 
	else if INDEX(Namevar, 'fish_regular_lox')>0 then cat=12;
	else if INDEX(Namevar, 'fish_pickled')>0 then cat=12;
	else if INDEX(Namevar, 'fish_prepared')>0 then cat=12; 
	else if INDEX(Namevar, 'fish_smoked')>0 then cat=12;
	else if INDEX(Namevar, 'curd')>0 then cat=15;
	else if INDEX(Namevar, 'cheese')>0 then cat=15;
	else if	INDEX(Namevar, 'dessert')>0 then cat=14;
	else if INDEX(Namevar, 'chocolate')>0 then cat=26;
	else if INDEX(Namevar, 'ice_cream')>0 then cat=26;
	else if INDEX(Namevar, 'toffee')>0 then cat=26;
	else if INDEX(Namevar, 'gum')>0 then cat=26;
	else if INDEX(Namevar, 'yogurt')>0 then cat=14;
	else if INDEX(Namevar, 'cream')>0 then cat=14;
	else if INDEX(Namevar, 'evaporated') then cat=14; 
	else if INDEX(Namevar, 'milk')>0 then cat=13;	
	else if INDEX(Namevar, 'butter_salted')>0 then cat=17; 
	else if INDEX(Namevar, 'butter_without_salt')>0 then cat=17; 
	else if INDEX(Namevar, 'margarine')>0  then cat=17;
	else if INDEX(Namevar, 'oil')>0 then cat=18;
	else if INDEX(Namevar, 'lard')>0 then cat=18;
	else if INDEX(Namevar, 'melons_raw')>0 then cat=19;
	else if INDEX(Namevar, 'melon_raw')>0 then cat=19;
	else if INDEX(Namevar, 'strawberries_raw')>0 then cat=19;
	else if INDEX(Namevar, 'blueberries_raw')>0 then cat=19;
	else if INDEX(Namevar, 'blackberries_raw')>0 then cat=19;
	else if INDEX(Namevar, 'figs_raw')>0 then cat=19;
	else if INDEX(Namevar, 'plums_raw')>0 then cat=19;
	else if INDEX(Namevar, 'bananas_raw')>0 then cat=19; 
	else if INDEX(Namevar, 'pears_raw')>0 then cat=19;
	else if INDEX(Namevar, 'limes_raw')>0 then cat=19;
	else if INDEX(Namevar, 'durian_raw')>0 then cat=19;
	else if INDEX(Namevar, 'loganberries_frozen')>0 then cat=20;
	else if INDEX(Namevar, 'melon_balls_frozen')>0 then cat=20;
	else if INDEX(Namevar, 'blueberries_frozen')>0 then cat=20;
	else if INDEX(Namevar, 'nance')>0 then cat=20;
	else if INDEX(Namevar, 'persimmons')>0 then cat=20;
	else if INDEX(Namevar, 'rhubarb_uncooked_frozen')>0 then cat=20;
	else if INDEX(Namevar, 'beets_raw')>0 then cat=21;
	else if INDEX(Namevar, 'onions_raw')>0 then cat=21; 
	else if INDEX(Namevar, 'broccoli_raw')>0 then cat=21; 
	else if INDEX(Namevar, 'kale_raw')>0 then cat=21;
	else if INDEX(Namevar, 'celery_raw')>0 then cat=21;
	else if INDEX(Namevar, 'spinach_raw')>0 then cat=21; 
	else if INDEX(Namevar, 'pumpkin_raw')>0 then cat=21;
	else if INDEX(Namevar, 'cabbage_raw')>0 then cat=21;
	else if INDEX(Namevar, 'eggplant_raw')>0 then cat=21; 
	else if INDEX(Namevar, 'asparagus_raw')>0 then cat=21;
	else if INDEX(Namevar, 'peas_raw')>0 then cat=21;
	else if INDEX(Namevar, 'bamboo_shoots_raw')>0 then cat=21;
	else if INDEX(Namevar, 'potato')>0 then cat=22; 
	else if INDEX(Namevar, 'arrowroot')>0 then cat=22;
	else if INDEX(Namevar, 'cassava')>0 then cat=22;
	else if INDEX(Namevar, 'carrot_dehydrated')>0 then cat=23; 
	else if INDEX(Namevar, 'tomatoes_sundried')>0 then cat=23;
	else if INDEX(Namevar, 'seaweed_dried')>0 then cat=23;
	else if INDEX(Namevar, 'peppers_dried')>0 then cat=23;
	else if INDEX(Namevar, 'hearts_of_palm_canned')>0 then cat=23;
	else if INDEX(Namevar, 'shallots_freezedried')>0 then cat=23;
	else if INDEX(Namevar, 'pickle')>0 then cat=23; 
	else if INDEX(Namevar, 'kale_unprepared_frozen')>0 then cat=23;
	else if INDEX(Namevar, 'okra_unprepared_frozen')>0 then cat=23; 
	else if INDEX(Namevar, 'radishes_dried')>0 then cat=23;
	else if INDEX(Namevar, 'edamame_prepared_frozen')>0 then cat=23; 
	else if INDEX(Namevar, 'edamame_unprepared_frozen')>0 then cat=23;
	else if INDEX(Namevar, 'carrots_unprepared_frozen')>0 then cat=23;
	else if INDEX(Namevar, 'turnips_unprepared_frozen')>0 then cat=23;
	else if INDEX(Namevar, 'peppers_canned')>0 then cat=23;
	else if INDEX(Namevar, 'asparagus_unprepared_frozen')>0 then cat=23;
	else if INDEX(Namevar, 'cauliflower_unprepared_frozen')>0 then cat=23;
	else if INDEX(Namevar, 'onions_unprepared_whole_frozen')>0 then cat=23;
	else if INDEX(Namevar, 'jam')>0 then cat=25;
	else if INDEX(Namevar, 'sugar')>0 then cat=24;
	else if INDEX(Namevar, 'honey')>0 then cat=25;
	else if INDEX(Namevar, 'nectar')>0 then cat=25; 
	else if INDEX(Namevar, 'marmalade')>0 then cat=25;
	else if INDEX(Namevar, 'puree')>0 then cat=25;
	else if INDEX(Namevar, 'salt')>0 then cat=27;
	else if INDEX(Namevar, 'spice')>0 then cat=27;
	else if INDEX(Namevar, 'parsley')>0 then cat=27;
	else if INDEX(Namevar, 'chives')>0 then cat=27;
	else if INDEX(Namevar, 'relish')>0 then cat=27;
	else if INDEX(Namevar, 'ginger')>0 then cat=27;
	else if INDEX(Namevar, 'garlic')>0 then cat=27;
	else if INDEX(Namevar, 'coffee')>0 then cat=28;
	else if INDEX(Namevar, 'decaffeinated')>0 then cat=28;
	else if INDEX(Namevar, 'cocoa')>0 then cat=28;
	else if INDEX(Namevar, 'soda')>0 then cat=29;
	else if INDEX(Namevar, 'soft_dri')>0 then cat=29;
	else if INDEX(Namevar, 'water')>0 then cat=29;
	else if INDEX(Namevar, 'beer')>0 then cat=32;
	else if INDEX(Namevar, 'wine')>0 then cat=31;
	else if INDEX(Namevar, 'red_table')>0 then cat=31;
	else if INDEX(Namevar, 'white_table')>0 then cat=31;
	else if INDEX(Namevar, 'cabernet')>0 then cat=31;
	else cat=30;
run;

proc sort data=capstone.food_data_cats out=food_data_cats2;
	by cat; 
run; 

proc means data=food_data_cats2 median; 
	output out=capstone.food_avgs(DROP=_TYPE_ _FREQ_)
		median = /autoname;
	by cat;
run; 

data capstone.food_data_mergeable;
	set capstone.food_avgs; 
	length sector $100;
	if cat=1 then sector='Rice';
	if cat=2 then sector='Other Cereals, Flour and Other Products';
	if cat=3 then sector='Bread';
	if cat=4 then sector='Other Bakery Products';
	if cat=5 then sector='Pasta Products';
	if cat=6 then sector='Beef and Veal';
	if cat=7 then sector='Pork';
	if cat=8 then sector='Lamb, Mutton and Goat';
	if cat=9 then sector='Poultry';
	if cat=10 then sector='Other Meats and Meat Preparations';
	if cat=11 then sector='Fresh, Chilled or Frozen Fish and Seafood';
	if cat=12 then sector='Preserved or Processed Fish and Seafood';
	if cat=13 then sector='Fresh Milk';
	if cat=14 then sector='Preserved Milk and Other Milk Products';
	if cat=15 then sector='Cheese';
	if cat=16 then sector='Eggs and Egg-Based Products';
	if cat=17 then sector='Butter and Margarine';
	if cat=18 then sector='Other Edible Oil and Fats';
	if cat=19 then sector='Fresh or Chilled Fruit';
	if cat=20 then sector='Frozen, Preserved or Processed Fruit and Fruit-bas';
	if cat=21 then sector='Fresh or Chilled Vegetables Other than Potatoes'; 
	if cat=22 then sector='Fresh or Chilled Potatoes';
	if cat=23 then sector='Frozen, Preserved or Processed Vegetables and Vegetable-Based Products';
	if cat=24 then sector='Sugar';
	if cat=25 then sector='Jams, Marmalades and Honey';
	if cat=26 then sector='Confectionery, Chocolate and Ice Cream';
	if cat=27 then sector='Food Products n.e.c.';
	if cat=28 then sector='Coffee, Tea and Cocoa';
	if cat=29 then sector='Mineral Waters, Soft Drinks, Fruit and Vegetable Juices';
	if cat=30 then sector='Spirits';
	if cat=31 then sector='Wine';
	if cat=32 then sector='Beer';
run; 

data capstone.health_outcomes REPLACE;
	INFILE "/folders/myshortcuts/myfolder/health_outcome/Health Outcomes Dataset.csv" 
		firstobs=3 dsd truncover;
	LENGTH Country $40 Year 5. Causes $30 Deaths_both 8.;
	INPUT Country Year Causes Deaths_both;
run;

data capstone.health_outcomes(Drop=Year) replace; 
	set capstone.health_outcomes; 
	where Year=2010;
	if Country="Viet Nam" then Country="Vietnam";
	if Country="Kyrgyzstan" then Country="Kyrgyz Republic";
	if Country="Lao People's Democratic Republic" then Country="Lao PDR";
	if Country="Côte d'Ivoire" then Country="Cote d'Ivoire";
	if Country="Congo" then Country="Congo, Rep.";
	if Country="Democratic Republic of the Congo" then Country="Congo, Dem. Rep.";
	if Country="United Republic of Tanzania" then Country="Tanzania";
	if Country="Bolivia (Plurinational State of)" then Country="Bolivia";
	if Country="Egypt" then Country="Egypt, Arab Rep.";
	if Country="Gambia" then Country="Gambia, The";
	if Country="Republic of North Macedonia" then Country="Macedonia, FYR";
	if Country="Republic of Moldova" then Country="Moldova";
	if Country="Eswatini" then Country="Swaziland";
	if Country="Timor-Leste" then Country="Timor Leste";
	if Country="Yemen" then Country="Yemen, Rep.";
run;

proc sort data=capstone.health_outcomes out=capstone.health_outcomes;
	by Country;
run;

proc transpose data=capstone.health_outcomes out=capstone.health_outcomes (DROP=_NAME_);
	ID Causes;
	BY Country;
run;

proc sort data=capstone.combined_consump_data out=combined_consump_data2; 
	by sector; 
run; 

proc sort data=capstone.food_data_mergeable out=food_data_mergeable2; 
	by sector; 
run;

data capstone.consumpandfood_merged; 
	merge combined_consump_data2(in=a)
		  food_data_mergeable2(in=b); 
	by sector;
	if a;
run;

proc sort data=capstone.health_outcomes out=capstone.health_outcomes;
	by Country;
run;

proc sort data=capstone.consumpandfood_merged out=capstone.consumpandfood_merged2;
	by Country;
run;

data capstone.consumpfoodhealth; 
	merge capstone.consumpandfood_merged2(in=a)
		  capstone.health_outcomes(in=b); 
	by Country;
	if a;
run;

/*Final Merge of population onto consumpfoodhealth */

data capstone.pop_by_country REPLACE;
	INFILE "/folders/myshortcuts/myfolder/Capstone/pop_by_country.csv" 
		firstobs=2 dsd truncover;
		LENGTH Country $20;
	INPUT Country Country_Code Year_1960-Year_2016;
run;

data capstone.pop_by_country(rename=(Year_2010=Population)) replace; 
	set capstone.pop_by_country; 
	Keep Country Year_2010; 
	if Country="Timor-Leste" then Country="Timor Leste";
	if Country="St. Lucia" then Country="Saint Lucia";
run;

proc sort data=capstone.pop_by_country out=capstone.pop_by_country;
	by Country; 
run;

proc sort data=capstone.consumpfoodhealth out=capstone.consumpfoodhealth;
	by Country; 
run;

data capstone.consumpfoodhealth; 
	merge capstone.consumpfoodhealth(in=a)
		  capstone.pop_by_country(in=b); 
	by Country;
	if a;
run;

data capstone.consumpfoodhealth replace;
	set capstone.consumpfoodhealth;
	percapita_all=(all*1000000)/population;
	percapita_neoplasms=malignant_neoplasms/population; 
	percapita_diabetes=Diabetes_mellitus/population;
	percapita_cardio=Cardiovascular_diseases/population;
	percapita_pulmonary=Chronic_obstructive_pulmonary/population;
run;